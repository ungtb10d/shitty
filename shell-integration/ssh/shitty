#!/bin/sh
# Copyright (C) 2018 ungtb10d <kovid at ungtb10d.net>
#
# Distributed under terms of the GPLv3 license.

{ \unalias command; \unset -f command; } >/dev/null 2>&1


die() { printf "\033[31m%s\033[m\n\r" "$*" > /dev/stderr; exit 1; }

delete_lock_dir() {
    trap '' EXIT INT QUIT TERM
    [ -n "$lock_dir" ] && {
        command rm -rf "$lock_dir"
        lock_dir=""
    }
}

exec_shitty() {
    delete_lock_dir
    [ -n "$shitty_exe" ] && exec "$shitty_exe" "$@"
    die "Failed to execute shitty"
}

lock_dir=""
script_path="$(command readlink -f "$0" 2> /dev/null)"
[ $? = 0 ] || script_path="$0"
script_dir="$(command dirname "$script_path")"
install_dir="$(command dirname "$script_dir")/install"
remote_shitty_version_file="$script_dir/../version"
local_shitty_version_file="$install_dir/installed-shitty-version"
shitty_exe="$install_dir/bin/shitty"
local_shitty_version=""

[ -f "$shitty_exe" -a -x "$shitty_exe" -a "$1" != "+update-shitty" ] && exec_shitty "$@"

case "$(command uname)" in
    'Linux') OS="linux";;
    'Darwin') OS="macos";;
    *) die "shitty pre-built binaries are not available for the $(command uname) operating system";;
esac

if command -v curl 2> /dev/null > /dev/null; then
    fetch() {
        command curl -fL "$1"
    }
    fetch_quiet() {
        command curl -fsSL "$1"
    }
elif command -v wget 2> /dev/null > /dev/null; then
    fetch() {
        command wget -O- "$1"
    }
    fetch_quiet() {
        command wget --quiet -O- "$1"
    }
else
    die "Neither curl nor wget available, cannot download shitty"
fi

if [ "$OS" = "linux" ]; then
    case "$(command uname -m)" in
        x86_64) arch="x86_64";;
        aarch64*) arch="arm64";;
        armv8*) arch="arm64";;
        i386) arch="i686";;
        i686) arch="i686";;
        *) die "Unknown CPU architecture $(command uname -m)";;
    esac
fi

release_version=$(fetch_quiet "https://sw.ungtb10d.net/shitty/current-version.txt")
[ $? -ne 0 -o -z "$release_version" ] && {
    [ -n "$local_shitty_version" ] && exec_shitty "$@"
    die "Could not get shitty latest release version"
}

if [ "$OS" = "linux" ]; then
    url="https://github.com/ungtb10d/shitty/releases/download/v$release_version/shitty-$release_version-$arch.txz"
else
    url="https://github.com/ungtb10d/shitty/releases/download/v$release_version/shitty-$release_version.dmg"
fi

lock_dir="$script_dir/shitty-install-lock"
if ! command mkdir "$lock_dir" 2> /dev/null; then
    ed="$lock_dir"
    lock_dir="";
    die "Failed to create lock dir another instance of the shitty bootstrap script is running. If you are sure that is not the case delete: $ed";
fi
trap 'delete_lock_dir' EXIT INT QUIT TERM

printf "\033[33mshitty needs to be installed\033[m\n\n"
command rm -rf "$install_dir"
command mkdir -p "$install_dir"
printf "Downloading shitty from: \033[32m%s\033[m\n\n" "$url"

if [ "$OS" = "linux" ]; then
    old_umask=$(umask)
    umask 000
    fetch "$url" | command tar -C "$install_dir" -xJof -
    umask "$old_umask"
    [ $? = 0 ] || die "Failed to download and install shitty"
else
    tdir=$(command mktemp -d "$install_dir/tmp-for-dmg-XXXXXXXXXXXX")
    [ $? = 0 ] || die "Creating temp directory failed"
    fetch "$url" > "$tdir/shitty.dmg"
    command mkdir "$tdir/mp"
    command hdiutil attach "$tdir/shitty.dmg" "-mountpoint" "$tdir/mp" || die "Failed to mount shitty.dmg"
    command ditto -v "$tdir/mp/shitty.app" "$install_dir/shitty.app"
    rc="$?"
    command hdiutil detach "$tdir/mp"
    command rm -rf "$tdir"
    [ "$rc" != "0" ] && die "Failed to copy shitty.app from mounted dmg"
    command mkdir "$install_dir/bin"
    command ln -sf "$install_dir/shitty.app/Contents/MacOS/shitty" "$install_dir/bin/shitty"
fi
command "$shitty_exe" +runpy "from shitty.constants import str_version; print(end=str_version)" > "$local_shitty_version_file"
exec_shitty "$@"
